from Crypto.Util.number import *


N1 = 0x9cca93a0eff966a6cc3426dc79f66c0526944c5a51681a3be685daee7506352dfb7bdd76e59995d2ba980158212f4797c3fc1ae81fdd3500e93634e7e5a47944d14b2de0922d0fcbe2ada121444ef6ad908992ffebaf3b710c2eb719b8b67a83711903885a6fcb0959dee527f946efd5f308dbb0e4eb720041a18e0984015da9
N2 = 0x56dc3d6211ef129bbaeadd8603658fec577ff9d95ad5e5fdd09c793a25dc932c98c0af71876a396663e398ab92ff1e504919ee3f1f5eda7a255ed68ac53d5f62d5b2a5e558fbe377078f8a1534bcfc6164febc51d3e004545106198492ebde663c530aac177ec30970b83e84e04d4251220f5ef3efaa396e81207b5d191bdffb579ad

e = 0x10001

## Factors according to factordb
p1 = int(sqrt(N1))
q1 = int(sqrt(N1))

p2 = 917519
q2 = N2 // p2

## Some checks
assert p1*q1 == N1 and p2*q2 == N2

ct = 15620344004575314381699909644476548125673811896863391476575828314467946163796453279562013347582204584161257318356658773248127199432536307725788425585122157944323601936111645375226259360207001107437486608453696480819916675738100568407249432260802623357309693764513235205165863599779333368122255526121539664687917017

ct = mod(ct, N2)

## Calculating all eth roots of ct in sagemath
roots = ct.nth_root(e, all=True)

## As N1 < N2, we know c1 < N1
c1 = [i for i in roots if i < N1][0]

c1 = mod(c1, N1)

## Calculating all eth roots of c1 in sagemath
roots = c1.nth_root(e, all=True)

## Checking for flag < sqrt(N1)
m = [i for i in roots if i < sqrt(N1)][0]

print(long_to_bytes(m))